name: Connect to VPN

on:
  push:
    branches: 
      - main
      - 62-testssss-automatic

jobs:
  connect:
    runs-on: ubuntu-latest
    steps:
    - name: Obtain snx and configure
      run: |
        wget http://bigdata.cesga.es/files/snx
        sudo dpkg --add-architecture i386
        sudo apt update
        sudo apt install libaudit1:i386 libbsd0:i386 libc6:i386 libcap-ng0:i386 libgcc-s1:i386 libpam0g:i386 libstdc++5:i386 libx11-6:i386 libxau6:i386 libxcb1:i386 libxdmcp6:i386
        sudo apt install -y expect
        chmod +x ./snx
      
    - name: Creating and executing expect file
      run: |
        cat << 'EOF' > snx_login.exp
        #!/usr/bin/expect

        #Spawn:
        spawn sudo ./snx -s secure.cesga.es -u ${{ secrets.USERNAME }}

        #Brief delay to send automatically the password. You don't have to do anything:
        expect "Please enter your password:"
        send "${{ secrets.PASSWD }}\r"

        #It waits for the confirmation and answers "Yes" by default.
        expect "Do you accept? \[y\]es/ \[N\]o:"
        send "y"

        #Ends of expect command
        expect eof
        
        EOF
        ls
        chmod +x snx_login.exp
        sudo ./snx_login.exp

    - name: Create build and test file
      run: |
        cat << 'EOF' > snx_login.exp
        #!/bin/bash

        EOF

    - name: Remote ssh execution 
      uses: appleboy/ssh-action@v1.2.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        proxy_host: ${{ secrets.PROXY_HOST }}
        proxy_username: ${{ secrets.USERNAME }}
        proxy_key: ${{ secrets.KEY }}
        script: |
          # echo $LMOD_SYSTEM_NAME
          export PATH=$PATH:$HOME/bin
          cd /mnt/netapp1/Store_Cunqa/home/cesga/${{ secrets.USERNAME }}/repos/CUNQA/cunqa

          # In the next line (LOADING MODULES) &> /dev/null redirects output so terminal isn't clogged (output will be ignored in /dev/null)                    
          module load qmio/hpc gcc/12.3.0 hpcx-ompi flexiblas/3.3.0 boost cmake/3.27.6 pybind11/2.12.0-python-3.9.9 nlohmann_json/3.11.3 ninja/1.9.0 qiskit/1.2.4-python-3.9.9 &> /dev/null

          echo "                  "

          # Find which nodes are idle between c7-4 and c7-22
          IDLE_NODES=$(sinfo -h -N -R -t idle | awk '{print $1}')
          filtered_nodes=$(echo "$IDLE_NODES" | awk -F'-' '$2 > 3 && $2 < 23 {print $0}')

          # Pick one random idle node
          random_node=$(echo "$filtered_nodes" | shuf -n 1)

          # Run a trivial program on the selected node and continue executing (& at the end) to reduce waiting time
          qraise -n 1 -t 00:00:01 --node_list=$random_node &> /dev/null

          python /mnt/netapp1/Store_CESGA/home/cesga/${{ secrets.USERNAME }}/repos/CUNQA/code_tests/tesst_runner.py
          echo "After LOGIN tests"
          echo "                   "
          echo "                   "
          echo "                   "
          echo "                   "



          # Start interactive session for all tests that don't use the python qraise command
          qcompute -c 62 --node $random_node --no-shell
          module load qmio/hpc gcc/12.3.0 hpcx-ompi flexiblas/3.3.0 boost cmake/3.27.6 pybind11/2.12.0-python-3.9.9 nlohmann_json/3.11.3 ninja/1.9.0 qiskit/1.2.4-python-3.9.9 &> /dev/null
          echo "                    "

          cd /mnt/netapp1/Store_CESGA/home/cesga/${{ secrets.USERNAME }}/repos/CUNQA         # Necessary for the correct CMakeList.txt to be executed on compilation.
          python /mnt/netapp1/Store_CESGA/home/cesga/${{ secrets.USERNAME }}/repos/CUNQA/code_tests/tesst_runner_interactive.py
          echo "                   "
          
          # Now kill the qinteractive session to free the resources
          job_id=$(squeue -w $random_node -o "%i" -h -u ${{ secrets.USERNAME }})
          scancel $job_id
          echo "After INTERACTIVE tests"



